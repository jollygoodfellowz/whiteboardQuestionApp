[ 
        {
            id: '1',
            name: 'FizzBuzz',
            problem:  'For multiples of three return “Fizz” and for multiples of five return “Buzz”. For numbers which are multiples of both three and five return “FizzBuzz”. If the number is not a multiple of three or five return an empty string "".',
            function: 'multiplesof3and5',
            class: 'FizzBuzz',
            parameters:'int x',
            return: 'String',
            solved: 'false'
        },
        {
            id:'2',
            name: 'Palindrome',
            problem: 'Is the string provided a palindrome or not? A palindrome is a string that reads the same forwards and backwards. For example: racecar. If the provided string is a palindrome simply return true if not false.',
            function: 'isPalindrome',
            class: 'Palindrome',
            parameters: 'String pali',
            return: 'boolean',
            solved: 'false'
        },

        {
            id:'3',
            name: 'Reverse a Linked List',
            problem: 'Given a linked list, which is defined as follows: class Node { int data; Node next; }</pre>. Reverse the order of the list. For example: a list such as 1-->2-->3 would become 3-->2-->1.',
            function: 'reverse',
            class: 'Reverse',
            parameters: 'Node curr',
            return: 'Node',
            solved: 'false',
            files: 'Node.java'
        },

        {
            id:'4',
            name: 'Delete the Nth node in a Linked List',
            problem: 'Given a linked list, which is defined as follows: class Node{ int data; Node next; }. Delete the index provided in your function. Be sure to check for invalid indexes and null.',
            function: 'deleteNth',
            class: 'DeleteNth',
            parameters: 'Node curr, int index',
            return: 'Node',
            solved: 'false',
            files: 'Node.java'
        },
        {
            id:'5',
            name: 'Sort a Linked List',
            problem: 'Given a linked list, which is defined as follows: class Node{ int data; Node next; }. Sort the list in ascending order.',
            function: 'sort',
            class: 'SortedLinkedList',
            parameters: 'Node curr',
            return: 'Node',
            solved: 'false',
            files: 'Node.java'
        },
        {
            id: '6',
            name: 'Detect a cycle in a Linked List',
            problem: 'Given a linked list, which is defined as follows: class Node{ int data; Node next; }. Write a function that detects a cycle in a linked list. A cycle is when the tail of a linked list points at the head of the linked list.',
            function: 'detect',
            class: 'DetectCycle',
            parameters: 'Node curr',
            return: 'Node',
            solved: 'false',
            files: 'Node.java'
        },
        {
            id: '7',
            name: 'Fibonacci sequence small',
            problem: 'The Fibonacci sequence is defined as follows: F0 = 0 and F1 = 1. The recurrence relation is Fn = Fn-1 + Fn-2. For example F2 = F1 + F0, F0 and F1 are already defined, so F2 = 1. The pattern continues in this manner. Write a function to return the nth Fibonacci number. In this version you will not be asked to return a number larger than Integer.MAX_VALUE in java, which is 2147483647.',
            function: 'fib',
            class: 'FibonacciSmall',
            parameters: 'int n',
            return: 'int',
            solved: 'false'
        },
        {
            id: '8',
            name: 'Fibonacci sequence large',
            problem: 'See Fibonacci small for the defintion of the Fibonacci sequence. In this version of the Fibonacci sequence you will be asked to return numbers larger than the max value an integer can hold in java. Instead of returning an int you will need to return a String representation of the nth Fibonacci numer',
            function: 'fib',
            class: 'FibonacciLarge',
            parameters: 'int n',
            return: 'String',
            solved: 'false'
        }
]
